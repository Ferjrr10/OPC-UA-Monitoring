"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readOperationLimits = exports.serverCapabilitiesIds = void 0;
/**
 * @module node-opcua-pseudo-session
 */
const node_opcua_nodeid_1 = require("node-opcua-nodeid");
const node_opcua_constants_1 = require("node-opcua-constants");
const node_opcua_service_read_1 = require("node-opcua-service-read");
const node_opcua_debug_1 = require("node-opcua-debug");
const warningLog = (0, node_opcua_debug_1.make_warningLog)(__filename);
exports.serverCapabilitiesIds = [
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MaxArrayLength,
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MaxStringLength,
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MaxByteStringLength,
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MinSupportedSampleRate,
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MaxBrowseContinuationPoints,
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MaxQueryContinuationPoints,
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MaxHistoryContinuationPoints,
    // new in 1.05
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MaxSessions,
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MaxSubscriptions,
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MaxMonitoredItems,
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MaxSubscriptionsPerSession,
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MaxSelectClauseParameters,
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MaxWhereClauseParameters,
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_ConformanceUnits,
    node_opcua_constants_1.VariableIds.Server_ServerCapabilities_MaxMonitoredItemsPerSubscription
];
async function readOperationLimits(session) {
    const ids = [
        node_opcua_constants_1.VariableIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerRead,
        node_opcua_constants_1.VariableIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerBrowse,
        node_opcua_constants_1.VariableIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerWrite,
        node_opcua_constants_1.VariableIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerMethodCall,
        node_opcua_constants_1.VariableIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerRegisterNodes,
        node_opcua_constants_1.VariableIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerNodeManagement,
        node_opcua_constants_1.VariableIds.Server_ServerCapabilities_OperationLimits_MaxMonitoredItemsPerCall,
        node_opcua_constants_1.VariableIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerHistoryReadData,
        node_opcua_constants_1.VariableIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerHistoryReadEvents,
        node_opcua_constants_1.VariableIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerHistoryUpdateData,
        node_opcua_constants_1.VariableIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerHistoryUpdateEvents,
        node_opcua_constants_1.VariableIds.Server_ServerCapabilities_OperationLimits_MaxNodesPerTranslateBrowsePathsToNodeIds
    ];
    const nodesToRead = ids.map((i) => ({ nodeId: (0, node_opcua_nodeid_1.makeNodeId)(i), attributeId: node_opcua_service_read_1.AttributeIds.Value }));
    const dataValues = await session.read(nodesToRead);
    function prepare(index) {
        const dataValue = dataValues[index];
        if (dataValue.statusCode.value === 0x00) {
            return dataValue.value.value;
        }
        else {
            warningLog("dataValue = ", dataValue.toString(), " for ", nodesToRead[index].nodeId.toString());
        }
        return 0;
    }
    // tslint:disable-next-line: object-literal-sort-keys
    const results = {
        maxNodesPerRead: prepare(0),
        maxNodesPerBrowse: prepare(1),
        maxNodesPerWrite: prepare(2),
        maxNodesPerMethodCall: prepare(3),
        maxNodesPerRegisterNodes: prepare(4),
        maxNodesPerNodeManagement: prepare(5),
        maxMonitoredItemsPerCall: prepare(6),
        maxNodesPerHistoryReadData: prepare(7),
        maxNodesPerHistoryReadEvents: prepare(8),
        maxNodesPerHistoryUpdateData: prepare(9),
        maxNodesPerHistoryUpdateEvents: prepare(10),
        maxNodesPerTranslateBrowsePathsToNodeIds: prepare(11)
    };
    return results;
}
exports.readOperationLimits = readOperationLimits;
//# sourceMappingURL=read_operational_limits.js.map