"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.testRSAPKCS1V15_EncryptDecrypt = void 0;
const crypto_1 = require("crypto");
const node_opcua_crypto_1 = require("node-opcua-crypto");
const node_opcua_debug_1 = require("node-opcua-debug");
const security_policy_1 = require("./security_policy");
const warningLog = (0, node_opcua_debug_1.make_warningLog)("NODE-OPCUA-W27");
function myCreatePrivateKey(rawKey) {
    // // see https://askubuntu.com/questions/1409458/openssl-config-cuases-error-in-node-js-crypto-how-should-the-config-be-updated
    // const backup = process.env.OPENSSL_CONF;
    // process.env.OPENSSL_CONF = "/dev/null";
    const retValue = (0, crypto_1.createPrivateKey)(rawKey);
    // process.env.OPENSSL_CONF = backup;
    return { hidden: retValue };
}
async function testRSAPKCS1V15_EncryptDecrypt() {
    const version = process.version.match(/v([0-9]+)\.([0-9]+)\.([0-9]+)/);
    if (!version) {
        throw new Error("Invalid version");
    }
    const major = parseInt(version[1], 10);
    const minor = parseInt(version[2], 10);
    const patch = parseInt(version[3], 10);
    if (major < 20) {
        return; // skip test
    }
    const keyPair = await crypto_1.subtle.generateKey({
        name: "RSA-OAEP",
        modulusLength: 4096,
        publicExponent: new Uint8Array([1, 0, 1]),
        hash: "SHA-512"
    }, true, ["encrypt", "decrypt"]);
    // export public key as base64 string and save to file
    const exportedPublicKey = await crypto_1.subtle.exportKey("spki", keyPair.publicKey);
    const publicKey = Buffer.from(exportedPublicKey).toString("base64");
    const privateKeyPem = await (0, node_opcua_crypto_1.privateKeyToPEM)(keyPair.privateKey);
    // const privateKeyFilename = ""; // fs.mkdtemp((), ".t.pem");
    // await fs.promises.writeFile(privateKeyFilename, privateKeyPem.privPem, "utf-8");
    const privateKey = myCreatePrivateKey(privateKeyPem.privPem);
    const buffer = Buffer.from("buffer");
    let decrypted;
    try {
        const encrypted = (0, security_policy_1.RSAPKCS1V15_Encrypt)(buffer, crypto_1.KeyObject.from(keyPair.publicKey));
        decrypted = (0, security_policy_1.RSAPKCS1V15_Decrypt)(encrypted, privateKey);
    }
    catch (err) { /**  */ }
    if (!decrypted || decrypted.toString("ascii") !== "buffer") {
        warningLog("[NODE-OPCUA-W27]", "node version", process.version);
        warningLog("  you need to use node flag --security-revert=CVE-2023-46809 if you have issue with RSA PKCS#1 v1.5");
    }
}
exports.testRSAPKCS1V15_EncryptDecrypt = testRSAPKCS1V15_EncryptDecrypt;
//# sourceMappingURL=verify_pcks1.js.map